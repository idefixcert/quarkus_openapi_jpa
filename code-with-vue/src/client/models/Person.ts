/* tslint:disable */
/* eslint-disable */
/**
 * code-with-quarkus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Status } from './Status';
import {
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
} from './Status';
import type { Dog } from './Dog';
import {
    DogFromJSON,
    DogFromJSONTyped,
    DogToJSON,
} from './Dog';

/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Person
     */
    birth?: Date;
    /**
     * 
     * @type {Status}
     * @memberof Person
     */
    status?: Status;
    /**
     * 
     * @type {Array<Dog>}
     * @memberof Person
     */
    dogs?: Array<Dog>;
}

/**
 * Check if a given object implements the Person interface.
 */
export function instanceOfPerson(value: object): value is Person {
    return true;
}

export function PersonFromJSON(json: any): Person {
    return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'birth': json['birth'] == null ? undefined : (new Date(json['birth'])),
        'status': json['status'] == null ? undefined : StatusFromJSON(json['status']),
        'dogs': json['dogs'] == null ? undefined : ((json['dogs'] as Array<any>).map(DogFromJSON)),
    };
}

export function PersonToJSON(value?: Person | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'birth': value['birth'] == null ? undefined : ((value['birth']).toISOString().substring(0,10)),
        'status': StatusToJSON(value['status']),
        'dogs': value['dogs'] == null ? undefined : ((value['dogs'] as Array<any>).map(DogToJSON)),
    };
}

