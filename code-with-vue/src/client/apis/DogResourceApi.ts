/* tslint:disable */
/* eslint-disable */
/**
 * code-with-quarkus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Dog,
} from '../models/index';
import {
    DogFromJSON,
    DogToJSON,
} from '../models/index';

export interface DogsIdDeleteRequest {
    id: number;
}

export interface DogsIdGetRequest {
    id: number;
}

export interface DogsPostRequest {
    dog: Dog;
}

/**
 * 
 */
export class DogResourceApi extends runtime.BaseAPI {

    /**
     * List
     */
    async dogsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DogFromJSON));
    }

    /**
     * List
     */
    async dogsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dog>> {
        const response = await this.dogsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async dogsIdDeleteRaw(requestParameters: DogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dogsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async dogsIdDelete(requestParameters: DogsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dogsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get
     */
    async dogsIdGetRaw(requestParameters: DogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dogsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogFromJSON(jsonValue));
    }

    /**
     * Get
     */
    async dogsIdGet(requestParameters: DogsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dog> {
        const response = await this.dogsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async dogsPostRaw(requestParameters: DogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dog'] == null) {
            throw new runtime.RequiredError(
                'dog',
                'Required parameter "dog" was null or undefined when calling dogsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DogToJSON(requestParameters['dog']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create
     */
    async dogsPost(requestParameters: DogsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dogsPostRaw(requestParameters, initOverrides);
    }

}
